#!/bin/sh

# Get standard options from command line or defaults.
. ais-options

# Do special preparation for the kernel build.

sys=var/sysgen
configdir=${AIS_ROOT}/${sys}/system

case ${AIS_MODE} in
    root|swap)
	# We want the kernel to mount the target disk rather than the disk
	# we're currently using, which is compiled in. For a swap partition
	# boot, we specify /dev/null for the root, swap, and dump devices,
	# and hard link /dev/swap,dump to /dev/null as well.  When booting
	# from the swap partition, the root device will get set via the
	# OSLoadPartition nvram variable.  I don't know if this is
	# legit, but it works.
	# Information on these paramenters is available from system(4).

	DCONFIG=${AIS_ROOT}/${sys}/system/irix.sm
	mv ${DCONFIG} ${DCONFIG}.plain
	if [ ${AIS_MODE} = "root" ]; then
	    sed -e "s-ROOTDEV: .*-ROOTDEV: ${disk}s0-g" ${DCONFIG}.plain | \
	    sed -e "s-SWAPDEV: .*-SWAPDEV: ${disk}s1 0 0-g" | \
	    sed -e "s-DUMPDEV: .*-DUMPDEV: ${disk}s1-g" > ${DCONFIG}
	else
	    sed -e "s-ROOTDEV: .*-ROOTDEV: /dev/null-g" ${DCONFIG}.plain | \
	    sed -e "s-SWAPDEV: .*-SWAPDEV: /dev/null 0 0-g" | \
	    sed -e "s-DUMPDEV: .*-DUMPDEV: /dev/null-g" > ${DCONFIG}
	fi
	;;

    diskless)
	# For diskless, the system.dl files handle setting up ROOT/SWAP/
	# DUMP appropriately. Note that this kernel lacks XFS support,
	# amongst other things. If we decide we want XFS filesystems,
	# this obviously needs to be changed.

	configdir=${AIS_ROOT}/${sys}/system.dl

#	The idea was to inhibit swapping for the diskless clients
#	here, but apparently once again this config file is not the
#	only source of the kernel's information. Documentation claims
#	that swapping can be punted by having bootparamd return
#	"swap=server:", however this resulted in a kernel panic.
#
#	DCONFIG=${configdir}/irix.sm
#	mv ${DCONFIG} ${DCONFIG}.plain
#	sed -e "s-SWAPDEV: .*-SWAPDEV: /dev/null 0 0-g" ${DCONFIG}.plain | \
#	sed -e "s-DUMPDEV: .*-DUMPDEV: /dev/null-g" > ${DCONFIG}

	DCONFIG=${configdir}/irix.sm
	mv ${DCONFIG} ${DCONFIG}.plain
	sed -e "s/EXCLUDE: xfs, grio, dmi, xfsrt/USE: xfs, grio, dmi, xfsrt/g"\
	    ${DCONFIG}.plain > ${DCONFIG}

	# We also want a ramdrive to hold machine-specific config
	# info while we decide what to do with the local disk.
	cp ${AIS_LIB}/ramdrive/ramdrive.master \
	    ${AIS_ROOT}/${sys}/master.d/ramdrive
	cp ${AIS_LIB}/ramdrive/ramdrive.sm ${AIS_ROOT}/${sys}/system.dl
	cp ${AIS_LIB}/ramdrive/ramdrive.c /tmp
	cp ${AIS_LIB}/ramdrive/ramdrive.h /tmp
	case "${AIS_OSVERSION}" in
	    6.[23])
		ramdrive_cc_extra="-32 -mips2 -Wc,-pic0"
		;;
	    *)
		ramdrive_cc_extra="-n32 -mips3"
		;;
	esac
	(cd /tmp; cc -c ramdrive.c -DAIS_OPSSYS=${AIS_OPSSYS} -D_K32U32 -D_KERNEL -DSTATIC=static -D_PAGESZ=4096 -D_MIPS32 -DIP22 -DR4000 -G 0 -non_shared -elf -xansi -fullwarn ${ramdrive_cc_extra})
	cp /tmp/ramdrive.o ${AIS_ROOT}/${sys}/boot
	;;

    afs)
	# For now, do nothing.
	# It's conceivable that we want to populate /os with initial
	# kernels. However, they might better belong in /install. The
	# kernels for swap booting will probably live there anyway.

	exit 0
	;;
esac

case ${AIS_MODE} in
    root)
	# chroot into the target root to build the kernel.
	# This obviates the need to have /var/sysgen/root/usr/bin/cc, etc.
	# in the miniroot.
	chroot ${AIS_ROOT} /usr/sbin/lboot -u /unix
	;;

    *)
	TOOLROOT=${AIS_ROOT}/${sys}/root; export TOOLROOT
	${AIS_ROOT}/usr/sbin/lboot -r ${AIS_ROOT} -u ${AIS_ROOT}/unix \
	    -s $configdir -w ${AIS_ROOT}/${sys}
	;;
esac

case ${AIS_MODE} in
    root|swap)
	# Putting this back is good because once this kernel boots,
	# /dev/root and /dev/swap will mean the right things.
	mv ${DCONFIG}.plain ${DCONFIG}
	;;
esac

exit 0
