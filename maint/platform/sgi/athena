# /etc/init.d/athena - Start/Stop the athena daemons
#
#

# First, set up some useful variables.

IS_ON=/sbin/chkconfig
if $IS_ON verbose ; then
    ECHO=echo
else            # For a quiet startup and shutdown
    ECHO=:
fi

HOME=/; export HOME
PATH=/usr/sbin:/usr/bsd:/sbin:/usr/bin:/bin:/etc:/usr/etc; export PATH

umask 022


case $1 in 
'start')

$ECHO "MIT configuration..."

# Read configuration variables

. /etc/athena/rc.conf

# Clean up the password file.

$ECHO "Cleaning up passwd file: \c"
if [ -f /etc/passwd.local ]; then
	$ECHO "recovered from passwd.local... \c"
	/sbin/cp /etc/passwd.local /etc/passwd
fi
$ECHO "done."

# Clean up the group file.

if [ -f /etc/group.local ]; then
	$ECHO "Recovering group file... \c"
	/sbin/cp /etc/group.local /etc/group
	$ECHO "done."
fi

# Remove old cruft and locks
rm -rf /.deleted

# Reset time with the time hub
if [ "${TIMECLIENT}" = "true" ]; then
	$ECHO ""
	$ECHO  "Setting time: \c"
	if [ -f /etc/athena/gettime ]; then
        	/etc/athena/gettime -s ${TIMEHUB}
	else
		$ECHO "Can't set time! gettime not found!"
	fi
fi

if [ "${AFSSRV}" = "true" ]; then
	$ECHO ""
	$ECHO "AFS server: \c"
	if [ -f /usr/afs/bin/bosserver ]; then
		/usr/afs/bin/bosserver &
		$ECHO "started."
	else
		$ECHO "Can't start AFS server!"
	fi
fi

# afsd is started by init.d/afs. We just do our little additions here.
if [ "${AFSCLIENT}" != "false" ]; then
	if [ -f  /afs/athena/service/aklog ]; then
          cp -p /afs/athena.mit.edu/service/aklog /bin/athena/aklog
	fi

	sh /etc/athena/config_afs
fi

# fsid not working yet so next block commented out; still true???
#if [ "${NFSCLIENT}" != "false" ]; then
#	$ECHO  "NFS client: \c"
#	$ECHO  "flushing old NFS connections... \c"
#	/bin/athena/fsid -p -a
#	$ECHO "done."
#fi

$ECHO "Removing old attach mount points... \c"
/bin/athena/detach -O -n -h -a
$ECHO "done."

$ECHO ""

if [ "${PUBLIC}" = "true" ]; then
	/sbin/cp /dev/null /usr/tmp/attachtab
fi

if [ "${RVDCLIENT}" = "true" ]; then
	$ECHO "Getting cluster information: \c"
	/etc/athena/save_cluster_info
	if [ -f /etc/athena/clusterinfo.bsh ]; then
		. /etc/athena/clusterinfo.bsh
		$ECHO "Attaching system libraries:"
		/bin/athena/attach -h -n -o hard $SYSLIB
		$ECHO "done."
	else
		$ECHO "no information available..."
	fi
fi

# Take a new release, if necessary.
if [ "${AUTOUPDATE}" = "true" -a -f /srvd/auto_update ]; then
	$ECHO "Checking /srvd/auto_update... \c"
	/srvd/auto_update rc < /dev/console > /dev/console 2>&1
	$ECHO "done."
elif [ -f /srvd/.rvdinfo ]; then
	NEWVERS=`awk '{a=$5}; END{print a}' /srvd/.rvdinfo`
	VERSION=`awk '{a=$5}; END{print a}' /etc/athena/version`
	if [ "${NEWVERS}" != "${VERSION}" ]; then
		cat <<EOF
The workstation software version ($VERSION) does not match the
version on the system packs ($NEWVERS).  A new version of software
may be available.  Please contact Athena Operations (x3-1410) to
have your workstation updated.
EOF
	 if [ ! -f /usr/tmp/update.check -a -f /usr/bsd/logger ]; then
       	    /usr/bsd/logger -t `uname -n` -p user.notice at revision $VERSION
	    cp /dev/null /usr/tmp/update.check
	 fi
	fi
fi

$ECHO ""

# If this is a PUBLIC workstation, ensure that that there are no hacks.
# Do not update rc.conf if the workstation and srvd are different versions.
if [ "${PUBLIC}" = "true" ]; then
	$ECHO "Public workstation cleanup... \c"
	rm -rf /.hushlogin /etc/X0.hosts /usr/local/
	rm -f /etc/*.local /etc/athena/*.local /etc/athena/login/*.local
	cp -p /srvd/etc/athena/attach.conf /etc/athena/attach.conf
	cp -p /srvd/etc/inetd.conf /etc/inetd.conf
	cp -p /srvd/etc/athena/inetd.conf /etc/athena/inetd.conf
	cp -p /srvd/etc/passwd /etc/passwd.local
	cp -p /etc/passwd.local /etc/passwd
	rm -f /etc/shadow
	cp -p /srvd/etc/group /etc/group.local
	cp -p /etc/group.local /etc/group
#?	cp -p /srvd/etc/syslog.conf /etc/syslog.conf

	cp /dev/null /etc/named.local
	cp /dev/null /etc/X0.hosts
	if [ -f /srvd/.rvdinfo ]; then
            NEWVERS=`awk '{a=$5} END{print a}' /srvd/.rvdinfo`
	    THISVERS=`awk '{a=$5} END{print a}' /etc/athena/version`
	    if [ "${NEWVERS}" = "${THISVERS}" ]; then
		$ECHO "Running track..."
		/usr/athena/etc/track
		if [ -f /srvd/etc/athena/rc.conf ]; then
       			sed -n  -e "s/^HOST=[^;]*/HOST=${HOST}/" \
			  -e "s/^ADDR=[^;]*/ADDR=${ADDR}/" \
			  -e "s/^MACHINE=[^;]*/MACHINE=${MACHINE}/" \
			  -e p /srvd/etc/athena/rc.conf > /etc/athena/rc.conf
       	        	. /etc/athena/rc.conf
		fi
	    fi
	fi
        $ECHO "done."
fi

if [ "${NEWMAILCF}" = "true" ];then
	$ECHO "Updating sendmail.cf... \c"
	cp -p /srvd/etc/sendmail.cf /etc/sendmail.cf
#	cp -p /srvd/etc/aliases /etc/aliases
	$ECHO "done."
fi

if [ -f /etc/sendmail.cf ]; then
	$ECHO "Freezing sendmail configuration... \c"
	/usr/lib/sendmail -bz
	$ECHO "done."
fi

# Clean up old lock files if not running sendmail. (init.d/mail does
# this if we are running sendmail)
if [ "${SENDMAIL}" = "false" ]; then
	$ECHO "Removing lockfiles... \c"
	rm -rf /var/spool/mqueue/[tnx]f*
	$ECHO "done."
fi

# Start standard daemons
$ECHO ""
$ECHO "Starting Athena daemons: \c"

# Start Athena's inetd
$ECHO "inetd... \c"
/etc/athena/inetd &

if [ "${ZCLIENT}" = "true" ]; then
	$ECHO "zhm... \c"
	rm -f /etc/athena/zhm.pid
	/etc/athena/zhm &
fi

if [ "${MRUPDATE}" = "true" ]; then
	$ECHO "update_server... \c"
	/usr/athena/etc/update_server &
fi

$ECHO "done."
$ECHO ""

if [ "${PUBLIC}" = "true" ]; then
	$ECHO  "Clearing out /mit... \c"
	/bin/rm -f /mit/*
	/bin/rmdir /mit/*  >/dev/null
	$ECHO "done."
fi

$ECHO "Editing /etc/motd... \c"
awk '{ prev = $0 }; END { print prev }' /etc/athena/version	> /tmp/t1
if [ "${PUBLIC}" != "true" ]; then
	awk '{ if ( NR > 1 ) print $0 }' /etc/motd		>>/tmp/t1
fi
mv /tmp/t1 /etc/motd
chmod 644 /etc/motd
$ECHO "done."

$ECHO "Fixing noattach, nocreate, noremote, and nologin... \c"
if [ "${NOCREATE}" = "true" ]; then
	echo "" >> /etc/nocreate
else
	rm -f /etc/nocreate
fi

if [ "${NOATTACH}" = "true" ]; then
	echo "" >> /etc/noattach
else
	rm -f /etc/noattach
fi

if [ "${NOREMOTE}" = "true" ]; then
	echo "" >> /etc/noremote
else
        rm -f /etc/noremote
fi

$ECHO "done."

rm -f /etc/nologin
$ECHO "Logins now possible."

$ECHO " done!"
	;;

'stop')
	pid=`cat /etc/athena/zhm.pid`
	if test "$pid"
	then
		kill $pid
	fi
	;;
*)
	$ECHO "usage: /etc/rc2.d/S90athena {start|stop}"
	;;
esac








