#!/sbin/sh
# $Id: athena-ws.rc,v 1.12 2005-04-22 18:05:46 ghudson Exp $
# /etc/init.d/athena-ws - Start/Stop the athena daemons

# First, set up some useful variables.  Note /usr/athena/etc at the
# end of PATH; we don't want to check AFS for binaries which live on
# local disk.

HOME=/; export HOME
PATH=/etc/athena:/bin/athena:/usr/athena/bin:/usr/bin:/usr/sbin:/sbin
PATH=${PATH}:/usr/athena/etc
export PATH

umask 022

case $1 in
start)

  echo "Beginning Athena startup tasks"

  # Let the log host know that we're booting, and whether there was a panic.
  panic=`dmesg | awk '
    /^panic/	{ panic = " (" $0 ")"; boots = 0; }
    /UNIX\(R\)/	{ if (++boots == 2) panic = ""; }
    END		{ print panic; }'`
  counterlog "booting$panic"

  # Syslog partition information for release planning purposes.
  rootdev=`mount | sed -n '/^\/ /s#^/ on \(/dev/dsk/[^ ]*\).*$#\1#p'`
  prtvtoc "$rootdev" | awk '
    BEGIN				{ printf "Partition info: "; }
    / sectors\/cylinder$/		{ scyl = $2; }
    / accessible cylinders$/		{ printf "total %d", $2 * scyl; }
    $7 == "/"				{ printf " root %d", $5; }
    $7 == "/usr"			{ printf " usr %d", $5; }
    $7 == "/var"			{ printf " var %d", $5; }
    END					{ print ""; }' | logger -p user.notice

  # We load a kernel module misc/obpsym to enable symbolic prom
  # debugging.  This module also sets the obpdebug kernel variable when
  # it loads, which causes panics to drop into the prom instead of
  # rebooting.  Turn off obpdebug now.
  echo "Clearing obpdebug."
  echo obpdebug/W0 | adb -k -w /dev/ksyms /dev/mem

  # Read configuration variables
  . /etc/athena/rc.conf

  # Store boot-time environment for starting server processes later.
  rm -f /var/athena/env.boot
  env > /var/athena/env.boot

  # Clean up the password file.
  if [ -f /etc/passwd.local ]; then
    echo "Recovering passwd file... \c"
    syncupdate -c /etc/passwd.new /etc/passwd.local /etc/passwd
    chmod 644 /etc/passwd
    echo "done."
  fi

  # Clean up the shadow file.
  if [ -f /etc/shadow.local ]; then
    echo "Recovering shadow file... \c"
    syncupdate -c /etc/shadow.new /etc/shadow.local /etc/shadow
    chmod 600 /etc/shadow
    echo "done."
  fi

  # Clean up the group file.
  if [ -f /etc/group.local ]; then
    echo "Recovering group file... \c"
    syncupdate -c /etc/group.new /etc/group.local /etc/group
    chmod 644 /etc/group
    echo "done."
  fi

  # Remove old cruft, locks, and login session records.
  rm -rf /.deleted /etc/sm/* /etc/sm.bak/* /var/athena/sessions/*
  rm -rf /tmp/session-*
  rm -rf /var/tmp/!!!SuperLock!!! /tmp/.esd
  rm -rf /var/athena/reactivate.pid /var/athena/reactivate.count
  rm -rf /var/adm/utmp /var/adm/wtmp

  # Handle an interrupted update.
  if [ -f /var/athena/update.running ]; then
    logger -p user.notice "Update did not complete"
    rm -rf /var/athena/update.running
  fi

  # afsd is started by init.d/afs.  We just do our little additions here.
  if [ "$AFSCLIENT" != false ]; then
    config_afs
  fi

  echo "Loading pcfile system... \c"
  modload /usr/kernel/fs/pcfs
  echo "done."
  echo "Loading fd driver... \c"
  modload /usr/kernel/fs/fdfs
  echo "done."

  if [ "$NFSCLIENT" != false ]; then
    echo "Flushing old NFS connections... \c"
    fsid -p -q -a
    echo "done."
  fi

  echo "Removing old attach mount points"
  detach -O -n -h -a

  if [ "$PUBLIC" = true ]; then
    rm -f /var/athena/attachtab/mountpoint/*
    rm -f /var/athena/attachtab/locker/*
    rm -rf /srvd /os

    # Early public workstation cleanup: remove cluster.local and
    # cluster.fallback before calling save_cluster_info, since
    # it may look at them.
    rm -f /etc/athena/cluster.local /etc/athena/cluster.fallback
  fi

  if [ "$RVDCLIENT" = true ]; then
    echo "Getting cluster information"
    save_cluster_info
    if [ -f /var/athena/clusterinfo.bsh ]; then
      . /var/athena/clusterinfo.bsh
      echo "Attaching system libraries"
      attach -h -n -o hard -O $SYSLIB

      if [ -n "$CLUSTER" ]; then
	touch /var/athena/iscluster
	echo "Use su to gain root access to cluster machines or" \
	  "quickstations." > /etc/noroot
	chmod 644 /var/athena/iscluster /etc/noroot
      else
	rm -f /var/athena/iscluster /etc/noroot
      fi
    fi
  fi

  # Take a new release, if necessary.
  echo "Checking for a new release"
  if [ -x /etc/athena/update_ws ]; then
    update_ws -a rc
  fi

  # If this is a PUBLIC workstation, ensure that that there are no hacks.
  # Do not update rc.conf if the workstation and srvd are different versions.
  if [ "$PUBLIC" = true ]; then
    echo "Beginning public workstation cleanup"
    rm -rf /.hushlogin /etc/X0.hosts /etc/nologin.persist /usr/local
    rm -f /etc/*.local /etc/athena/*.local /etc/athena/login/*.local
    rm -f /etc/ssh_host_* /etc/ssh_random_seed
    rm -rf /etc/athena/orbitrc
    # Clean up Mozilla cache directories.
    rm -rf /var/tmp/Mozilla-*

    pwconfig=/afs/athena.mit.edu/system/config/passwd/`machtype -S`
    if [ -r $pwconfig/passwd ]; then
      syncupdate -c /etc/passwd.local.new $pwconfig/passwd /etc/passwd.local
    fi
    if [ -r $pwconfig/shadow ]; then
      syncupdate -c /etc/shadow.local.new $pwconfig/shadow /etc/shadow.local
    fi
    if [ -r $pwconfig/group ]; then
      syncupdate -c /etc/group.local.new $pwconfig/group /etc/group.local
    fi
    syncupdate -c /etc/passwd.new /etc/passwd.local /etc/passwd
    syncupdate -c /etc/shadow.new /etc/shadow.local /etc/shadow
    syncupdate -c /etc/group.new /etc/group.local /etc/group
    chmod 644 /etc/passwd /etc/group
    chmod 600 /etc/shadow
    cp -p /srvd/etc/athena/athinfo.access /etc/athena
    cp -p /srvd/etc/athena/local-lockers.conf /etc/athena

    cp -p /srvd/etc/netspy /etc/netspy
    cp /dev/null /etc/X0.hosts
    if [ -f /srvd/.rvdinfo ]; then
      # Do not track or update config files if the workstation and
      # srvd are different versions.
      newv=`awk '{ a = $5; } END { print a; }' /srvd/.rvdinfo`
      thisv=`awk '{ a = $5; } END { print a; }' /etc/athena/version`
      if [ "$newv" = "$thisv" ]; then
        echo "Checking system integrity (this takes a few minutes)..."
        /etc/athena/verify
        if [ -f /srvd/etc/athena/rc.conf ]; then
          sed -e "s#^HOST=[^;]*#HOST=$HOST#" \
              -e "s#^ADDR=[^;]*#ADDR=$ADDR#" \
              -e "s#^NETDEV=[^;]*#NETDEV=$NETDEV#" \
              -e "s#^PUBLIC=[^;]*#PUBLIC=$PUBLIC#" \
              -e "s#^MACHINE=[^;]*#MACHINE=$MACHINE#" \
              -e "s#^SYSTEM=[^;]*#SYSTEM=$SYSTEM#" \
              /srvd/etc/athena/rc.conf \
              > /etc/athena/rc.conf
          . /etc/athena/rc.conf
        fi
        configs=`cat /srvd/usr/athena/lib/update/configfiles`
        for i in $configs; do
          if [ -f /srvd$i ]; then
            src=/srvd$i
          else
            src=/os$i
          fi
          syncupdate -c $i.new $src $i
        done
        ps -e | awk '$4 == "inetd" { print $1; }' \
          | xargs kill -HUP
      fi
    fi

  echo "Ending public workstation cleanup"
  fi

  if [ ! -h /usr/java -a ! -d /usr/java ]; then
    logger -p user.notice "Replacing /usr/java symlink"
    ln -s java1.2 /usr/java
  fi

  if [ "$PUBLIC" = true ]; then
    echo "Clearing out /mit... \c"
    rm -f /mit/*
    rmdir /mit/* 2>/dev/null
    rm -f /var/athena/attachtab/directory/_=mit*
    echo "done."
  fi

  echo "Editing /etc/motd... \c"
  awk '{ prev = $0; } END { print prev; }' /etc/athena/version > /tmp/t1
  if [ "$PUBLIC" != true ]; then
    awk '{ if (NR > 1) print $0; }' /etc/motd >> /tmp/t1
  fi
  mv -f /tmp/t1 /etc/motd
  chmod 644 /etc/motd
  echo "done."

  echo "Fixing noattach, nocreate, noremote, and nologin... \c"
  if [ "$NOCREATE" = true ]; then
    touch /etc/nocreate
  else
    rm -f /etc/nocreate
  fi

  if [ "$NOATTACH" = true ]; then
    touch /etc/noattach
  else
    rm -f /etc/noattach
  fi

  if [ "$NOREMOTE" = true ]; then
    touch /etc/noremote
  else
    rm -f /etc/noremote
  fi

  echo "done."

  if [ -r /etc/nologin.persist ]; then
    cp /etc/nologin.persist /etc/nologin
    echo "Logins disabled."
  else
    rm -f /etc/nologin
    echo "Logins now possible."
  fi

  echo "Updating panel menus... \c"
  local-menus
  echo "done."

  # Recreate GConf schemas.
  echo "Recreating gconf schemas... \c"
  gdir=/etc/athena/gconf
  rm -rf $gdir/gconf.xml.defaults
  mkdir $gdir/gconf.xml.defaults
  chgrp other $gdir/gconf.xml.defaults
  GCONF_CONFIG_SOURCE=xml::$gdir/gconf.xml.defaults
  export GCONF_CONFIG_SOURCE
  # athena.schemas has to be installed last in order to override
  # standard GNOME defaults.
  for f in $gdir/schemas/*.schemas $gdir/schemas/athena.schemas; do
    gconftool-2 --makefile-install-rule $f > /dev/null 2>&1
  done
  echo "done."

  echo "Ending Athena startup tasks"
  ;;
stop)
  ;;
*)
  echo "usage: $0 {start|stop}"
  ;;
esac
