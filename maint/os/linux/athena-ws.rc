#!/bin/sh
#
# athena-ws:	Set up initial Athena workstation state.
#
# chkconfig: 2345 47 80
# description: Initial Athena startup.
#
# config: /etc/sysconfig/network
# config: /etc/athena/rc.conf

# Source function library
. /etc/rc.d/init.d/functions
. /etc/athena/rc.conf

PATH=/etc/athena:/bin/athena:/usr/athena/bin:$PATH

RETVAL=0

# See how we were called
case "$1" in
  start)
	counterlog booting

	if [ -f /etc/passwd.local ]; then
		echo -n "Recovering Athena password file"
		syncupdate -c /etc/passwd.new /etc/passwd.local /etc/passwd \
			 && chmod 644 /etc/passwd \
			 && success "passwd recovery" \
				 || failure "passwd recovery"
		echo		 
	fi

	if [ -f /etc/shadow.local ]; then
		echo -n "Recovering Athena shadow password file"
		syncupdate -c /etc/shadow.new /etc/shadow.local /etc/shadow \
			 && chmod 600 /etc/shadow \
			 && success "shadow recovery" \
				 || failure "shadow recovery"
		echo		 
	fi

	if [ -f /etc/group.local ]; then
		echo -n "Recovering Athena group file"
		syncupdate -c /etc/group.new /etc/group.local /etc/group \
			 && chmod 644 /etc/group \
			 && success "group recovery" \
				 || failure "group recovery"
		echo
	fi

	if [ ! -f /var/athena/core.root ]; then
		echo -n "Creating Athena core.root file"
		touch /var/athena/core.root \
			 && chmod 660 /var/athena/core.root \
			 && chown root:daemon /var/athena/core.root \
			 && success "making core.root" \
				 || failure "making core.root"
		echo
	fi

	echo -n "Removing stale locks and session records"
	rm -rf /.deleted /etc/sm/* /etc/sm.bak/* /var/athena/sessions/* \
		&& rm -rf /tmp/session-* \
		&& rm -rf '/var/tmp/!!!SuperLock!!!' /tmp/.esd \
		&& rm -rf /var/athena/reactivate.pid \
		&& rm -rf /var/athena/reactivate.count \
		&& success "removing stale files" \
			|| failure "removing stale files"
	echo

	# Handle an interrupted update.
	if [ -f /var/athena/update.running ]; then
		echo -n "Cleaning up after an interrupted update"
		rm -rf /var/athena/update.running \
			&& logger -p user.notice "Update did not complete" \
			&& success "interrupted update clean-up" \
				|| failure "interrupted update clean-up"
	fi

	if [ -e /dev/cdrom ]; then
		echo -n "Fixing permissions on CDROM device"
		chmod 666 /dev/cdrom \
			 && success "CDROM device chmod" \
				 || failure "CDROM device chmod"
		echo
	fi

	if [ -e /etc/DIR_COLORS ]; then
		echo -n "Fixing permissions on /etc/DIR_COLORS"
		chmod 644 /etc/DIR_COLORS \
			 && success "DIR_COLORS chmod" \
				 || failure "DIR_COLORS chmod"
		echo
	fi

	if [ "$PUBLIC" = true ] && grep /dev/cdrom /etc/fstab | \
	    grep -vq user; then
		echo -n "Fixing mount options for CDROM"
		sed -e 's/iso9660[^ 	]*[ 	]*/&user,/' \
		    /etc/fstab > /etc/fstab.new \
			&& mv /etc/fstab.new /etc/fstab \
			&& chmod 644 /etc/fstab \
			&& success "fstab mod for CDROM" \
			|| failure "fstab mod for CDROM"
		echo
	fi

	if [ "$PUBLIC" = true ] && grep /dev/cdrom /etc/fstab | \
	    grep -vq udf; then
		echo -n "Fixing fstype options for CDROM"
		sed -e 's/iso9660/udf,&/' \
		    /etc/fstab > /etc/fstab.new \
			&& mv /etc/fstab.new /etc/fstab \
			&& chmod 644 /etc/fstab \
			&& success "fstab mod for CDROM" \
			|| failure "fstab mod for CDROM"
		echo
	fi

	if [ -e /dev/fd0 ]; then
		echo -n "Fixing permissions on floppy device"
		chmod 666 /dev/fd0* \
			 && success "floppy device chmod" \
				 || failure "floppy device chmod"
		echo
	fi

	if lspci -n | egrep -q 'Class 0101: 8086:(7111|2411)' \
	   && grep -q 'hda$' /proc/partitions; then
		echo -n "Turning on DMA for /dev/hda"
		hdparm -q -d1 /dev/hda && success hdparm || failure hdparm
		echo
	fi

	# Convert the RPM database to RPM 4.x format if necessary.
	if [ -f /var/lib/rpm/packages.rpm -a ! -f /var/lib/rpm/Packages ]; then
		case `rpm -q --queryformat '%{VERSION}' rpm` in
		4.*)
			echo -n Rebuilding RPM db:
			cp -a /var/lib/rpm /var/athena/rpm.save && \
				rpm --rebuilddb && \
				success rebuild || failure rebuild
			;;
		esac
		echo
	fi

	echo -n Getting cluster information
	save_cluster_info
	echo

	if [ -s /var/athena/clusterinfo.bsh ]; then
		. /var/athena/clusterinfo.bsh
		if [ -n "$CLUSTER" ]; then
			touch /var/athena/iscluster
			echo "Use su to gain root access to cluster machines" \
				"or quickstations." > /etc/noroot
			chmod 644 /var/athena/iscluster /etc/noroot
		else
			rm -f /var/athena/iscluster /etc/noroot
		fi
	fi

	if [ "$PUBLIC" = true ]; then
		echo -n Public workstation cleanup

		fix-xconfig
		rm -rf /.hushlogin /etc/X0.hosts \
			&& rm -f /etc/nologin.persist \
			&& rm -rf /etc/ssh_host_* \
			&& rm -f /etc/ssh_random_seed \
			&& rm -rf /etc/athena/orbitrc \
			&& rm -rf /var/tmp/Mozilla-* \
			&& rm -f {/etc,/etc/athena,/etc/athena/login}/*.local \
			&& chmod 600 /etc/shadow \
			&& cp /dev/null /etc/X0.hosts \
			&& success "public ws clean" \
				|| failure "public ws clean"

		echo
	fi

	echo -n Checking X mouse configuration
	fix-mouse
	echo

	echo -n Editing /etc/motd:
	awk '{ prev = $0; } END { print prev; }' /etc/athena/version >/tmp/t1\
		&& if [ "$PUBLIC" != true ]; then  \
			awk '{ if (NR > 1) print $0; }' /etc/motd >> /tmp/t1; \
		    fi \
		&& mv -f /tmp/t1 /etc/motd \
		&& chmod 644 /etc/motd \
		&& success "editing /etc/motd" || failure "editing /etc/motd"
	echo

	echo -n Fixing nocreate:
	if [ "$NOCREATE" = true ]; then
		touch /etc/nocreate
	else
		rm -f /etc/nocreate
	fi && success nocreate || failure nocreate
	echo

	echo -n Fixing noattach:
	if [ "$NOATTACH" = true ]; then
		touch /etc/noattach
	else
		rm -f /etc/noattach
	fi && success noattach || failure noattach
	echo

	echo -n Fixing noremote:
	if [ "$NOREMOTE" = true ]; then
		touch /etc/noremote
	else
		rm -f /etc/noremote
	fi && success noremote || failure noremote
	echo

	echo -n Fixing nologin:
	if [ -f /etc/nologin.persist ]; then
		cp /etc/nologin.persist /etc/nologin
	else
		rm -f /etc/nologin
	fi && success nologin || failure nologin
	echo

	if [ "$PUBLIC" = true ] && modprobe imm 2> /dev/null; then
		echo -n Adding ZIP250 support:
		mkdir -p /mnt/zip
		if ! grep -q ^/dev/sda /etc/fstab; then
			cat << EOF >> /etc/fstab
/dev/sda4		/mnt/zip		msdos	owner,noauto	0 0
EOF
		fi
		if grep -q '^/dev/sda4[	 ]*/mnt/zip[	 ]' /etc/fstab; then
			chmod 666 /dev/sda4
		fi && success ZIP250
	fi
	echo

	echo -n Updating panel menus:
	local-menus && success local-menus || failure local-menus
	echo

	echo -n Recreating gconf schemas:
	gdir=/etc/athena/gconf
	rm -rf $gdir/gconf.xml.defaults
	mkdir $gdir/gconf.xml.defaults
	export GCONF_CONFIG_SOURCE=xml::$gdir/gconf.xml.defaults
	# athena.schemas has to be installed last in order to override
	# standard GNOME defaults.
	for f in /etc/gconf/schemas/*.schemas $gdir/schemas/*.schemas \
		 $gdir/schemas/athena.schemas; do
		gconftool-2 --makefile-install-rule $f > /dev/null 2>&1
	done
	success gconf
	echo

	# Ensure all /usr/share/pixmaps files are accessible under
	# /usr/athena/share/pixmaps.
	echo -n Making pixmap symlinks:
	# Ensure all subdirectories exist in /usr/athena/share/pixmaps.
	(cd /usr/share/pixmaps && find . -type d -print0) | \
	  (cd /usr/athena/share/pixmaps && xargs -0 mkdir -p -m 755)
	# Make a symlink for each file in /usr/share/pixmaps which isn't
	# already present in /usr/athena/share/pixmaps.
	(cd /usr/share/pixmaps && find . -type f -print0) | xargs -0 sh -c '
	  for f; do
	    if [ ! -e "/usr/athena/share/pixmaps/$f" ]; then
	      ln -s "/usr/share/pixmaps/$f" "/usr/athena/share/pixmaps/$f"
	    fi
	  done' sh
	# Remove stale symlinks in /usr/athena/share/pixmaps.
	find /usr/athena/share/pixmaps -type l -print0 | xargs -0 sh -c '
	  for f; do
	    [ -r "$f" ] || rm -f "$f"
	  done' sh
	# Remove empty directories in /usr/athena/share/pixmaps.
	find /usr/athena/share/pixmaps -type d -depth -print | \
	  xargs rmdir 2>/dev/null
	success pixmaps
	echo

	# Recreate mimeinfo.cache files.
	echo -n Recreating mimeinfo.cache files:
	XDG_DATA_DIRS=/usr/athena/share:/usr/share \
	  /usr/athena/bin/update-desktop-database
	success update-desktop-database
	echo

	# Firefox will update its extensions cache in the user's
	# profile when it detects that an extension has changed.
	# Since an extension directory's modification time differs
	# on each machine, Firefox will perform this update for
	# each extension every time a user runs it on a different
	# machine.  With the Red Hat Firefox RPM installed, which
	# includes several dozen language pack extensions, this
	# procedure introduces a huge delay in start-up time.  We
	# work around the problem by removing all of these language
	# pack extensions.
	echo -n Removing Firefox language pack extensions:
	rm -rf /usr/lib/firefox-*/extensions/langpack-*
	success "removing Firefox langpack extensions"

	;;
  stop)
	;;

  status)
	;;

  restart)
	$0 start
	;;

  reload)
	;;

  *)
	echo "Usage: athena-ws {start|stop|status|restart|reload}"
	exit 1
	;;
esac

exit 0
