# $Id: athena,v 1.25 2002-06-26 22:29:11 ghudson Exp $
# /etc/init.d/athena - Start/Stop the athena daemons

# First, set up some useful variables.  Note /usr/athena/etc at the
# end of PATH; we don't want to check AFS for binaries which live on
# local disk.

IS_ON=/sbin/chkconfig
if $IS_ON verbose ; then
    ECHO=echo
else            # For a quiet startup and shutdown
    ECHO=:
fi

HOME=/; export HOME
PATH=/etc/athena:/bin/athena:/usr/sbin:/usr/bsd:/sbin:/usr/bin:/bin:/etc
PATH=$PATH:/usr/etc:/usr/athena/etc
export PATH

umask 022

case $1 in
'start')

$ECHO "Beginning Athena startup tasks"

# Let the log host know that we're booting.
counterlog booting

# Read configuration variables
. /etc/athena/rc.conf

# Store boot-time environment for starting server processes later.
rm -f /var/athena/env.boot
env > /var/athena/env.boot

# Clean up the password file.
if [ -f /etc/passwd.local ]; then
	$ECHO "Recovering passwd file... \c"
	syncupdate -c /etc/passwd.new /etc/passwd.local /etc/passwd
	chmod 644 /etc/passwd
	$ECHO "done."
fi

# Clean up the shadow file
if [ -f /etc/shadow.local ]; then
	$ECHO "Recovering shadow file... \c"
	syncupdate -c /etc/shadow.new /etc/shadow.local /etc/shadow
	chmod 600 /etc/shadow
	$ECHO "done."
fi

# Clean up the group file.
if [ -f /etc/group.local ]; then
	$ECHO "Recovering group file... \c"
	syncupdate -c /etc/group.new /etc/group.local /etc/group
	chmod 644 /etc/group
	$ECHO "done."
fi

# Make sure /core exists.
if [ ! -r /core ]; then
	touch /core
	chmod 660 /core
	chown root:daemon /core
fi

# Remove old cruft and login session records.
rm -rf /.deleted /var/athena/sessions/*
rm -rf /var/tmp/!!!SuperLock!!! /tmp/.esd
rm -rf /var/athena/reactivate.pid /var/athena/reactivate.count

# Handle an interrupted update.
if [ -f /var/athena/update.running ]; then
	logger -p user.notice "Update did not complete"
	rm -rf /var/athena/update.running
fi

# afsd is started by init.d/afs.  We just do our little additions here.
if [ "$AFSCLIENT" != false ]; then
	config_afs
fi

if [ "$NFSCLIENT" != false ]; then
	$ECHO "Flushing old NFS connections... \c"
	fsid -p -q -a
	$ECHO "done."
fi

$ECHO "Removing old attach mount points"
detach -O -n -h -a

if [ "$PUBLIC" = true ]; then
	rm -f /var/athena/attachtab/mountpoint/*
	rm -f /var/athena/attachtab/locker/*
	rm -rf /srvd /os /install

	# Early public workstation cleanup: remove cluster.local and
	# cluster.fallback before calling save_cluster_info, since
	# it may look at them.
	rm -f /etc/athena/cluster.local /etc/athena/cluster.fallback
fi

if [ "$RVDCLIENT" = true ]; then
	$ECHO "Getting cluster information"
	save_cluster_info
	if [ -f /var/athena/clusterinfo.bsh ]; then
		. /var/athena/clusterinfo.bsh
		$ECHO "Attaching system libraries"
		attach -h -n -o hard -O $SYSLIB
	fi
fi

# Take a new release, if necessary.
$ECHO "Checking for a new release"
if [ -x /etc/athena/update_ws ]; then
	update_ws -a rc
fi

# Irix likes to have its CD-ROM devices be mode 600 by default, which
# would require various CD-playing programs to be setuid.  Make sure
# they're world-writeable.
for id in `hinv | awk '/CDROM/ {print $7"d"$3}'`; do
      chmod 666 /dev/scsi/sc${id}l0
done

# If this is a PUBLIC workstation, ensure that that there are no hacks.
# Do not update rc.conf if the workstation and srvd are different versions.
if [ "$PUBLIC" = true ]; then
	$ECHO "Beginning public workstation cleanup"
	rm -rf /.hushlogin /etc/X0.hosts /etc/nologin.persist
	rm -f /etc/*.local /etc/athena/*.local /etc/athena/login/*.local
	rm -f /etc/ssh_host_* /etc/ssh_random_seed
	rm -rf /etc/ptmp /etc/stmp /etc/gtmp
	if [ -r /srvd/etc/passwd ]; then
		syncupdate -c /etc/passwd.local.new /srvd/etc/passwd \
			/etc/passwd.local
	fi
	if [ -r /srvd/etc/shadow ]; then
		syncupdate -c /etc/shadow.local.new /srvd/etc/shadow \
			/etc/shadow.local
	fi
	syncupdate -c /etc/group.local.new /srvd/etc/group /etc/group.local
	syncupdate -c /etc/passwd.new /etc/passwd.local /etc/passwd
	syncupdate -c /etc/shadow.new /etc/shadow.local /etc/shadown
	syncupdate -c /etc/group.new /etc/group.local /etc/group
	chmod 644 /etc/passwd /etc/group
	chmod 600 /etc/shadow
	cp -p /srvd/etc/athena/athinfo.access /etc/athena/athinfo.access

	touch /etc/X0.hosts

	find /lost+found -type f -mtime +3 -exec rm -f {} \; 2>/dev/null
	find /usr/vice/cache/lost+found -type f -exec rm -f {} \; 2>/dev/null

	if [ -f /srvd/.rvdinfo ]; then
		newv=`awk '{ a = $5; } END { print a; }' /srvd/.rvdinfo`
		thisv=`awk '{ a = $5; } END { print a; }' /etc/athena/version`
		if [ "$newv" = "$thisv" ]; then
			$ECHO "Running oscheck (this takes a few minutes)..."
			oscheck
			$ECHO "Running track"
			track
			if [ -f /srvd/etc/athena/rc.conf ]; then
	       			sed -e "s#^HOST=[^;]*#HOST=$HOST#" \
				  -e "s#^ADDR=[^;]*#ADDR=$ADDR#" \
				  -e "s#^NETDEV=[^;]*#NETDEV=$NETDEV#" \
				  -e "s#^NETMEDIA=[^;]*#NETMEDIA=$NETMEDIA#" \
				  -e "s#^MACHINE=[^;]*#MACHINE=$MACHINE#" \
				  -e "s#^SYSTEM=[^;]*#SYSTEM=$SYSTEM#" \
				  /srvd/etc/athena/rc.conf \
				  > /etc/athena/rc.conf
				. /etc/athena/rc.conf
			fi
			configs=`cat /srvd/usr/athena/lib/update/configfiles`
			for i in $configs; do
				if [ -f /srvd$i ]; then
					src=/srvd$i
				else
					src=/os$i
				fi
				syncupdate -c $i.new $src $i
			done
			ps -e | awk '$4 == "inetd" { print $1; }' \
				| xargs kill -HUP
		fi
	fi

	# To allow non-setuid mtools to work on zip drives on public
	# workstations.
	if [ -c /dev/scsi/sc0d5l0 ]; then
		chmod a+rw /dev/scsi/sc0d5l0
	fi

	$ECHO "Ending public workstation cleanup"
fi

# Clean up old lock files if not running sendmail. (init.d/mail does
# this if we are running sendmail)
if [ "$SENDMAIL" = false ]; then
	$ECHO "Removing lockfiles... \c"
	rm -rf /var/spool/mqueue/[tnx]f*
	$ECHO "done."
fi

# Start standard daemons
$ECHO "Starting Athena daemons: \c"

if [ "$KRBSRV" != false -a -f /.k ]; then
	$ECHO "kerberos... \c"
	if [ "$KRBSRV" = true ]; then
		krbopt="-n"
	else
		krbopt="-r $KRBSRV -n"
	fi
	kerberos $krbopt &
	if [ "$KADMSRV" = true ]; then
		$ECHO "kadmind... \c"
		kadmind $krbopt &
	fi
fi

if [ "$TIMECLIENT" = true ]; then
	$ECHO "ntpd... \c"
	ntpd &
fi

# Tell inetd to reread its config file, now that all
# filesystems are available.
killall -HUP inetd

# Start Athena's inetd.  Make sure the time zone is set in its environment.
# Use full pathname to distinguish from native inetd.
. /etc/TIMEZONE
$ECHO "inetd... \c"
if [ "$ACCESSON" = true ]; then
	/etc/athena/inetd -n &
else
	/etc/athena/inetd &
fi

if [ "$OLC" = true ]; then
	$ECHO "olcd... \c"
	olcd &
	$ECHO "rpd... \c"
	rpd &
fi

if [ "$ZSERVER" = true ] ; then
	$ECHO "zephyrd... \c"
	zephyrd &
fi

if [ "$ZCLIENT" = true ]; then
	$ECHO "zhm... \c"
	zhm &
fi

if [ "$LPD" = true ]; then
	# Use absolute path to distinguish from the vendor lpd.
	$ECHO "lpd... \c"
	/usr/athena/etc/lpd &
fi

if [ "$MRUPDATE" = true ]; then
	$ECHO "update_server... \c"
	update_server &
fi

if [ "$SSHD" = true -o "$SSHD" = switched ]; then
	case $SSHD,$ACCESSON in
		true,*)		sshdopt= ;;
		switched,true)	sshdopt=-s ;;
		switched,*)	sshdopt=-S ;;
	esac
	$ECHO "sshd... \c"
	sshd $sshdopt &
fi

$ECHO "done."

if [ "$PUBLIC" = true ]; then
	$ECHO "Clearing out /mit... \c"
	rm -f /mit/*
	rmdir /mit/* 2>/dev/null
	rm -f /var/athena/attachtab/directory/_=mit*
	$ECHO "done."
fi

$ECHO "Editing /etc/motd... \c"
awk '{ prev = $0; } END { print prev; }' /etc/athena/version > /tmp/t1
if [ "${PUBLIC}" != "true" ]; then
	awk '{ if (NR > 1) print $0; }' /etc/motd >> /tmp/t1
fi
mv -f /tmp/t1 /etc/motd
chmod 644 /etc/motd
$ECHO "done."

$ECHO "Fixing noattach, nocreate, noremote, and nologin... \c"
if [ "$NOCREATE" = true ]; then
	touch /etc/nocreate
else
	rm -f /etc/nocreate
fi

if [ "$NOATTACH" = true ]; then
	touch /etc/noattach
else
	rm -f /etc/noattach
fi

if [ "$NOREMOTE" = true ]; then
	touch /etc/noremote
else
        rm -f /etc/noremote
fi

$ECHO "done."

if [ -r /etc/nologin.persist ]; then
	cp /etc/nologin.persist /etc/nologin
	$ECHO "Logins disabled"
else
	rm -f /etc/nologin
	$ECHO "Logins now possible."
fi

$ECHO "Updating panel menus... \c"
local-menus
$ECHO "done."

$ECHO "Ending Athena startup tasks"
	;;

'stop')
	if [ -s /var/athena/zhm.pid ]; then
		kill `cat /var/athena/zhm.pid`
	fi
	if [ -s /var/athena/inetd.pid ]; then
		kill `cat /var/athena/inetd.pid`
	fi
	if [ -s /var/athena/sshd.pid ]; then
		kill `cat /var/athena/sshd.pid`
	fi
	;;
*)
	$ECHO "usage: /etc/rc2.d/S93athena {start|stop}"
	;;
esac
