#!/bin/sh

# Based on: $XConsortium: Xsession,v 1.7 92/08/06 11:08:14 gildea Exp $

# # Uncomment this for X11R5 redirection of Xsession errors.
#
# # redirect errors to a file in user's home directory if we can
# for errfile in "$HOME/.xsession-errors" "/tmp/xses-$USER"
# do
#         if ( cp /dev/null "$errfile" 2> /dev/null )
#         then
#                 chmod 600 "$errfile"
#                 exec > "$errfile" 2>&1
#                 break
#         fi
# done


case $# in
1)
	case $1 in
	failsafe)
	    dim="`xdpyinfo | awk ' /dimensions/ {print $2}' | grep '1024x768'`"
	    if [ "$?" = 0 ]; then
		    geom="80x40+190+102"
		    font="-sgi-terminal-*-*-*--12-*"
	    else
		    geom="80x40+150+172"
		    font="-sgi-terminal-*-*-*--17-*"
	    fi
	    exec xwsh -geom $geom -fn $font -xrm "XWsh.autoFork: off" -nomenu
	    ;;
	esac
esac

host=`hostname`
dotdesktop=.desktop-$host
xsession=$HOME/.xsession
resources=$HOME/.Xresources
sgiresources=$HOME/.Sgiresources
sgisession=$HOME/.sgisession
autoworkspace=$HOME/.workspace/autostart
userenv='/usr/bin/X11/userenv -nologin'
desktopenv=$HOME/$dotdesktop/desktopenv
wmsession=$HOME/$dotdesktop/4Dwmsession
panelsession=$HOME/$dotdesktop/panelsession
firsttime=$HOME/$dotdesktop/firsttime
configchecks=$HOME/$dotdesktop/configchecks
sgisessioncheck=$configchecks/checksgisession
xsessioncheck=$configchecks/checkxsession
chestrccheck=$configchecks/checkchestrc
versioncheck=$configchecks/checkversion
nodesktop=$HOME/$dotdesktop/nodesktop
desktopdir=$HOME/$dotdesktop
rundesktop=TRUE
lang=$HOME/.lang
confirmdirectory=/usr/share/misc/sessionwarnings

if [ ! -d $desktopdir ]; then
   /usr/lib/desktop/makeDotDesktop
fi

# Set up for various configuration checks.  Create a directory for
# them if it isn't already present.  Note several of the following 
# commands are in parentheses.  This avoids having the script die
# if there is an error

if [ ! -d $configchecks ]
then
	(mkdir $configchecks)
	#save a version; this may be helpful in the future
	(echo "1" > $versioncheck)
fi

# Earlier versions of this file used a single firsttime flag.  We now
# use several flags for more flexibility.  If there was a firsttime
# flag from earlier, pretend we did certain checks (under the
# assumption that by now the user has all this straightened out)

if [ -f $firsttime ]
then
	(echo "1" > $sgisessioncheck)
	rm $firsttime
fi

#check for .Xsession
#if [ -r $xsession -a "$0" != $xsession ]; then
# if the user hasn't been warned, yet, warn them that the .xsession
# could keep them from loading the desktop.
#	if [ ! -f $xsessioncheck ]
#	then
#		xconfirm -file $confirmdirectory/xsession.msg -c > /dev/null
#		(echo "1" > $xsessioncheck)
#	fi
#
#	if [ -x $xsession ]; then
#		exec $xsession
#	else
#		exec /bin/sh $xsession
#	fi
#fi

# Set the users language
if [ -r $lang -a -f $lang ] ; then LANG=`cat $lang`; export LANG; fi

if [ -r $resources ]; then
  if [ "${NOCALLS-ok}" = "ok" ] ; then xrdb -load -quiet $resources ; fi

        if [ -r $sgiresources ]; then
                xrdb -merge -quiet $sgiresources
        fi
fi

# Check to see if the user has a .chestrc that they haven't been
# warned about

if [ -f $HOME/.chestrc -a ! -f $chestrccheck ]
then
	# if the chestrc is older than the file
	# /usr/lib/X11/system.chestrc, it probably preedates the
	# install, so we move it out of the way.  If it is newer, we
	# just issue a warning. 
	if /usr/lib/desktop/newer $HOME/.chestrc /usr/lib/X11/system.chestrc
	then
		xconfirm -file $confirmdirectory/chestrc.nomove.msg -c > /dev/null
	else
		xconfirm -file $confirmdirectory/chestrc.move.msg -c > /dev/null
		mv $HOME/.chestrc $HOME/.chestrc.bak
	fi
	(echo "1" > $chestrccheck)
fi

#if there is a desktop environment file, load it
if [ -r $desktopenv ]; then
	. $desktopenv
fi

screens=`/usr/bin/X11/xlistscrns`

#for screen in $screens
#	do 
#	/usr/bin/X11/xsetroot -cursor_name X_cursor 	\
#		-fg red -bg white -display $screen
#	done

# Gives anyone on any host access to this display
# /usr/bin/X11/xhost +

# Determine the correct visuals and colormaps for icon based
# applications.  This must be run before any icon based apps,
# and since the window manager can start such apps (through session
# management, this must be run before 4Dwm).
# Also, if the displays have a single colormap, we preallocate the
# important colors to minimize colormap flashing with the GL.


for screen in $screens
	do
		DISPLAY=$screen /usr/lib/desktop/makeIconVisuals
		DISPLAY=$screen /usr/lib/desktop/preallocColors
	done

#
# Note: Output from $HOME/.sgisession, 4Dwm, workspace and toolchest
# is redirected to /dev/console. All other output is written to 
# /usr/adm/SYSLOG by default.
#

#
# Do language dependent stuff
intlenv=`gettxt uxsgidesktop:452 ':'`
eval ${intlenv}

#if there is a panelsession file then run it.  The panelsession file
#contains all those commands created through control panels
if [ -r $panelsession ]; then
	/bin/sh $panelsession >/dev/console 2>&1 &
fi

#4Dwm's -launch flag tells 4Dwm to launch the apps saved in the 4Dwmsession file
/usr/bin/X11/4Dwm -launch >/dev/console 2>&1 &
/usr/bin/X11/wait4wm

#
# BEGIN SOUNDSCHEME MODIFICATIONS
# -------------------------------

# start soundscheme daemon
if /sbin/chkconfig soundscheme
then
	/usr/sbin/soundscheme >/dev/console 2>&1 &
fi

#
# END SOUNDSCHEME MODIFICATIONS
# -----------------------------

#
# BEGIN Desktop  MODIFICATIONS
#
#

# always start up toolchest.  Toolchest doesn't set WM_COMMAND, so
# session management doesn't start it.  This way, even if toolchest
# is killed, logging out and in will force it to restart
for screen in $screens
do
	DISPLAY=$screen /usr/bin/X11/toolchest -name ToolChest >/dev/console 2>&1 &
done


# if no .desktop-<hostname>/4Dwmsession or if not running the SM version of 4DWM
# then start up the normal set of apps

runwmsession=FALSE
if [ -r $wmsession -a -s $wmsession ]
then
	# wait for the window manager to be ready for session management
	# try calling tellwm, but if it fails, sleep and try again
	for i in 1 2 3 4 5
	do
		if /usr/bin/X11/tellwm -t end_session
		then
			runwmsession=TRUE
			break
		else
			sleep 1
		fi
	done
fi
if [ -r $nodesktop ]
then
	rundesktop=FALSE
fi
if [ "$rundesktop" = TRUE ]
then
	/usr/sbin/fm  -lrb >/dev/console 2>&1 &
fi
#if [ "$runwmsession" = FALSE ]
#then
#	/usr/sbin/startconsole -iconic
#fi

if [ -x $sgisession ]; then
	$sgisession >/dev/console 2>&1 &
elif [ -r $sgisession ]; then
	/bin/sh $sgisession >/dev/console 2>&1 &
fi

# if the user has a .sgisession it can create multiple of copies of
# apps run.  If we have not already done so, check to see if one is present
if [ -f $sgisession -a ! -f $sgisessioncheck ]; then

	# if the sgisession is older than the new window manager
	# it probably predates the install, so move it out of the way.  If
	# it is newer, we just issue a warning.
	if /usr/lib/desktop/newer $sgisession /usr/bin/X11/4Dwm
	then
		xconfirm -file $confirmdirectory/sgisession.nomove.msg -c > /dev/null
	else
		xconfirm -file $confirmdirectory/sgisession.move.msg -c > /dev/null
		mv $sgisession $sgisession.bak
		sleep 3
		tellwm save_configuration
	fi
	(echo "1" > $sgisessioncheck)
fi

exec /usr/bin/X11/reaper
