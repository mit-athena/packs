Name: athena-ws
Summary: Athena workstation management infrastructure
License: MIT
Group: System Environment/Base
Requires: athena-desync, athena-base, athena-sendmail, athena-gettime, athena-ntp, athena-read-edid, pciutils

%description
Various maintenanance and configuration files required for any
Athena workstation.

%define esh1 /afs/sipb/project/tcsh/tcsh
%define esh2 /afs/sipb/project/tcsh/t
%define esh3 /afs/sipb/project/tcsh/betatcsh
%define esh4 /afs/sipb/project/tcsh/b
%define esh5 /afs/athena/project/gnu/bin/bash
%define esh6 /afs/sipb/project/bash/bash
%define extrashells %esh1 %esh2 %esh3 %esh4 %esh5 %esh6

%build
cd os/linux && cc -O -o vortex-diag vortex-diag.c

%install
rm -rf $RPM_BUILD_ROOT
mkdir $RPM_BUILD_ROOT
./do.sh -p -s /xxx -d $RPM_BUILD_ROOT install

#Extra stuff
mkdir -p $RPM_BUILD_ROOT/{usr/athena/man,etc/athena}
mkdir -p $RPM_BUILD_ROOT/usr/X11R6/lib/X11/app-defaults
cp masks $RPM_BUILD_ROOT/etc/athena/masks
cp local-lockers.conf $RPM_BUILD_ROOT/etc/athena/local-lockers.conf
cp passwd.fallback $RPM_BUILD_ROOT/etc/passwd.fallback
cp syslog.conf $RPM_BUILD_ROOT/etc/syslog.conf.athena
cp system.mwmrc $RPM_BUILD_ROOT/usr/X11R6/lib/X11/system.mwmrc.athena
cp update_ws.sh $RPM_BUILD_ROOT/etc/athena/update_ws
cp update_ws.8 $RPM_BUILD_ROOT/usr/athena/man/man8/update_ws.8
cp Mwm $RPM_BUILD_ROOT/usr/X11R6/lib/X11/app-defaults/Mwm.athena
cp XTerm $RPM_BUILD_ROOT/usr/X11R6/lib/X11/app-defaults/XTerm.athena
cp os/linux/vortex-diag $RPM_BUILD_ROOT/etc/athena/vortex-diag
chmod +x $RPM_BUILD_ROOT/etc/athena/update_ws

%ifos linux
mkdir -p $RPM_BUILD_ROOT/etc/cron.d
cp athena.cron $RPM_BUILD_ROOT/etc/cron.d/athena
cp man.config $RPM_BUILD_ROOT/etc/man.config.athena
cp dhclient-enter-hooks $RPM_BUILD_ROOT/etc
%else
mkdir -p $RPM_BUILD_ROOT/var/spool/cron/crontabs
cp crontab.root $RPM_BUILD_ROOT/var/spool/cron/crontabs/root
%endif

# This file actually goes in the athena-afs package.
rm $RPM_BUILD_ROOT/etc/athena/config_afs

find $RPM_BUILD_ROOT -type f -or -type l |
  sed -e "s|^$RPM_BUILD_ROOT||" \
      -e "s|^/etc/athena/local-lockers.conf$|%config(noreplace) \0|" \
      -e "s|^/etc/syslog.conf.athena$|%config \0|" \
      -e "s|^/usr/X11R6/lib/X11/system.mwmrc.athena$|%config \0|" \
      -e "s|^/etc/dhclient-enter-hooks$|%config \0|" |
  sort > rpm.filelist

%triggerin -- man
cp /etc/man.config.athena /etc/man.config

%triggerin -- sysklogd
cp /etc/syslog.conf.athena /etc/syslog.conf

%triggerin -- XFree86
cp /usr/X11R6/lib/X11/app-defaults/XTerm.athena /usr/X11R6/lib/X11/app-defaults/XTerm

%triggerin -- openmotif
cp /usr/X11R6/lib/X11/system.mwmrc.athena /usr/X11R6/lib/X11/system.mwmrc
cp /usr/X11R6/lib/X11/app-defaults/Mwm.athena /usr/X11R6/lib/X11/app-defaults/Mwm

%triggerin -- chkfontpath
# This font directory causes problems for the Star Office help system.
if grep -q /usr/X11R6/lib/X11/fonts/latin2/Type1 /etc/X11/fs/config; then
  chkfontpath -r /usr/X11R6/lib/X11/fonts/latin2/Type1
fi
exit 0

%triggerin -- initscripts
# Add warnings on disabled consoles pointing people at tty7.
for i in 1 2 3 4 5 6; do
  if grep -q ^$i: /etc/inittab; then true; else
    echo "$i:2345:once:echo \"Type CTRL-ALT-F7 to log in.\" > /dev/tty$i" >> /etc/inittab
  fi
done

%triggerin -- dev
# Make sure the permissions on the sound devices are appropriate
chmod 666 /dev/{audio,dsp,midi00,mixer,sequencer,sndstat}

%triggerin -- finger-server
if [ -f /etc/xinetd.d/finger ]; then
  sed -e '/disable/s/yes/no/' /etc/xinetd.d/finger > /etc/xinetd.d/finger.new
  mv -f /etc/xinetd.d/finger.new /etc/xinetd.d/finger
fi

%triggerin -- talk-server
if [ -f /etc/xinetd.d/talk ]; then
  sed -e '/disable/s/yes/no/' /etc/xinetd.d/talk > /etc/xinetd.d/talk.new
  mv -f /etc/xinetd.d/talk.new /etc/xinetd.d/talk
fi

%triggerin -- coreutils
sed -e '/^COLOR/s/tty/none/' /etc/DIR_COLORS > /etc/DIR_COLORS.new
mv -f /etc/DIR_COLORS.new /etc/DIR_COLORS
sed -e '/^COLOR/s/tty/none/' /etc/DIR_COLORS.xterm > /etc/DIR_COLORS.xterm.new
mv -f /etc/DIR_COLORS.xterm.new /etc/DIR_COLORS.xterm

%triggerin -- bonobo-activation
cfg=/etc/bonobo-activation/bonobo-activation-config.xml
if grep -q /usr/athena $cfg; then true; else
  sed -e '/<\/searchpath>/i\
  <item>/usr/athena/lib/bonobo/servers</item>' $cfg > $cfg.new
  mv $cfg.new $cfg
fi

%triggerin -- libgnomeprint22
# Default to US Letter paper, not A4 paper.
for cfg in /usr/share/libgnomeprint/*/{models,printers}/*; do
  if grep -q 'PhysicalSize.*A4' $cfg; then
    sed -e '/PhysicalSize.*A4/s/A4/USLetter/' $cfg > $cfg.new
    mv $cfg.new $cfg
  fi
done

%triggerin -- kernel
# /sbin/new-kernel-pkg blew away the single-user boot option.  Put it
# back.
cf=/boot/grub/grub.conf
if [ -f $cf ] && ! grep -qi 'kernel.*single' $cf; then
  cp $cf $cf.new
  # The first awk script spits out the default entry; the second one
  # modifies it for single-user mode.
  awk -F '[[:blank:]=]' '
    /^[[:blank:]]*default[[:blank:]=]/  { default = $2; }
    /^[[:blank:]]*title[[:blank:]=]/    { printing = (which++ == default); }
                                        { if (printing) print; }' $cf \
  | awk '
    /^[[:blank:]]*title[[:blank:]=]/    { $0 = $0 " (single user mode)"; }
    /^[[:blank:]]*kernel[[:blank:]=]/   { $0 = $0 " single"; }
                                        { print; }' >> $cf.new
  mv $cf.new $cf
fi

%triggerin -- kernel >= 2.4.9
# punt on smp machines
if uname -r|grep -q smp ; then
  exit 0
fi

# punt if already converted
if test -e /var/athena/ext3.converted ; then
  exit 0
fi

# Find devices for root and boot filesystems, converting symbolic
# tags to real device names.  Punt if they're not clearly resolvable.
rootfs=`sed -n -e '/[ 	]\/[ 	]/s/[ 	].*//p' /etc/fstab`
bootfs=`sed -n -e '/[ 	]\/boot[ 	]/s/[ 	].*//p' /etc/fstab`
if test -z "${rootfs%LABEL*}" ; then
  rootfs=`mount -l|grep "\[${rootfs#LABEL=}\]"|sed -e 's/[ 	].*//'`
fi
if test -z "${bootfs%LABEL*}" ; then
  bootfs=`mount -l|grep "\[${bootfs#LABEL=}\]"|sed -e 's/[ 	].*//'`
fi
if test -z "${bootfs}" -o -z "${rootfs}" -o \
	! -e "${bootfs}" -o ! -e "${rootfs}"; then
  exit 0
fi

# switch root and boot filesystems to ext3 (if not done already)
umask 022
if grep -q '[ 	]/[ 	].*ext2' /etc/fstab ; then
  sed -e '/[ 	]\/[ 	]/s/ext2/ext3/' /etc/fstab > /etc/fstab.new
  mv -f /etc/fstab.new /etc/fstab
  buildext3=true
fi
if grep -q '[ 	]/boot[ 	].*ext2' /etc/fstab ; then
  sed -e '/[ 	]\/boot[ 	]/s/ext2/ext3/' /etc/fstab > /etc/fstab.new
  mv -f /etc/fstab.new /etc/fstab
  buildext3=true
fi

# add ext3 system support
if [ "${buildext3}" == true ] ; then
  touch /var/athena/ext3.converted

  oldkernelversion=`uname -r`
  oldkernelversion=${oldkernelversion%smp}
  newkernelversion=`ls -l /boot/vmlinuz|sed -e 's/.*vmlinuz-//'`
  if [ -z "${newkernelversion}" ] ; then
    echo "No kernel detected, build initrd and modify lilo.conf by hand."
    exit 0
  fi

  # build ext3 journals
  tune2fs -j ${rootfs}
  tune2fs -j ${bootfs}

  # add initrd entry (or entries) to anything in /etc/lilo.conf that matches
  if ! grep -q initrd=/boot/initrd-${oldkernelversion}'[^0-9]*'.img /etc/lilo.conf ; then
    sed -e '/image=\/boot\/vmlinuz-'${oldkernelversion}'$/s/$/\
	initrd=\/boot\/initrd-'${oldkernelversion}.img/ \
	-e '/image=\/boot\/vmlinuz-'${oldkernelversion}smp'$/s/$/\
	initrd=\/boot\/initrd-'${oldkernelversion}smp.img/ /etc/lilo.conf \
	> /etc/lilo.conf.new
    mv -f /etc/lilo.conf.new /etc/lilo.conf
  fi
  # if there's not a concurrent kernel update, we need to run lilo here
  if [ "${oldkernelversion}" == "${newkernelversion}" ] ; then
    mkinitrd -f /boot/initrd-${newkernelversion}.img ${newkernelversion}
    if grep -q initrd=/boot/initrd-${oldkernelversion}smp.img /etc/lilo.conf ; then
      mkinitrd -f /boot/initrd-${newkernelversion}smp.img ${newkernelversion}smp
    fi
    /sbin/lilo
  fi
fi

%post
chkconfig --add athena-ws
chkconfig --add athena-verify
chkconfig --add syncconf
chkconfig --add athena-sysconfig
# Force a reset to what's specified in the rc file; we changed it to
# run after afs in 9.0.
chkconfig --level 2345 athena-ws reset

# turn on gx110 sound support for machines that lost data in the
# switchover from conf.modules to modules.conf
if /sbin/lspci -n|grep -q 1274:1371 ; then
  touch /etc/modules.conf
  if grep -q sound-slot-0 /etc/modules.conf ; then true ; else
	cat >> /etc/modules.conf << EOF
alias sound-slot-0 es1371
EOF
  fi
fi
# turn on gx150 sound support for machines that were originally installed
# with a more ignorant kudzu
if /sbin/lspci -n|grep -q 8086:2445 ; then
  touch /etc/modules.conf
  if grep -q sound-slot-0 /etc/modules.conf ; then true ; else
	cat >> /etc/modules.conf << EOF
alias sound-slot-0 i810_audio
options i810_audio ftsodell=1
EOF
  fi
fi

# A bug in the 3C509 driver causes Dell GX150 and GX240 machines to
# fail to autonegotiate.  Twiddling the eeprom settings on the card
# works around this problem, so do that for now.
if /sbin/lspci -n | grep -q 10b7:9200; then
  if /etc/athena/vortex-diag -x 2 | grep -q "Would write"; then
    /etc/athena/vortex-diag -w -x 2 > /dev/null
    mii-tool -R
  fi
fi

# Turn on DontZap in the X configuration.
if [ -f /etc/X11/XF86Config ]; then
  sed -e 's/#DontZap/DontZap/' < /etc/X11/XF86Config > /etc/X11/XF86Config.new
  mv /etc/X11/XF86Config.new /etc/X11/XF86Config
fi

# Enable loading of freetype and type1 font handlers in the X configuration.
if [ -f /etc/X11/XF86Config-4 ]; then
  sed -e 's/#[[:space:]]*\(Load[[:space:]]\+"freetype"\)/\1/' \
      -e 's/#[[:space:]]*\(Load[[:space:]]\+"type1"\)/\1/' \
      /etc/X11/XF86Config-4 > /etc/X11/XF86Config-4.new
  mv /etc/X11/XF86Config-4.new /etc/X11/XF86Config-4
fi

# kernel-headers-2.2.16-3 from Red Hat moved /usr/include/{linux,asm}
# from the file list so the post script.  Since new versions of RPMs
# are installed before old ones are uninstalled, the uninstallation of
# the older kernel-headers RPM would nuke those symlinks.  Red Hat has
# promised to fix this packaging error in the next version of
# kernel-headers.  Until they do, we need this workaround.
if [ ! -e /usr/include/linux -a ! -e /usr/include/asm ]; then
  ln -s ../src/linux/include/linux /usr/include/linux
  ln -s ../src/linux/include/asm /usr/include/asm
fi

if grep -q ^HOST /etc/athena/rc.conf ; then true ; else
  HOST=`hostname`  
  cat << EOF >> /etc/athena/rc.conf
HOST=$HOST;		export HOST		#* Hostname
EOF
fi

if grep -q ^ADDR /etc/athena/rc.conf ; then true ; else
  ADDR=`ifconfig eth0 | grep inet\ addr | sed -e s/^.*addr:// | awk  '{ print $1 ; }'`
  cat << EOF >> /etc/athena/rc.conf
ADDR=$ADDR;		export ADDR		#* Internet address
EOF
fi

grep -q ^NETDEV /etc/athena/rc.conf || cat << EOF >> /etc/athena/rc.conf
NETDEV=eth0;		export NETDEV		#* Network interface
EOF

if grep -q ^MACHINE /etc/athena/rc.conf ; then true ; else
  MACHINE=`uname -m`
  cat << EOF >> /etc/athena/rc.conf
MACHINE=$MACHINE;	export MACHINE		# Type of machine
EOF
fi

if grep -q ^SYSTEM /etc/athena/rc.conf ; then true ; else
  SYSTEM=`uname -s`
  cat << EOF >> /etc/athena/rc.conf
SYSTEM=$SYSTEM; 	export SYSTEM		# Type of operating system
EOF
fi

grep -q ^PUBLIC /etc/athena/rc.conf || cat << EOF >> /etc/athena/rc.conf
PUBLIC=false;		export PUBLIC		# Public workstation?
EOF

grep -q ^NOCREATE /etc/athena/rc.conf || cat << EOF >> /etc/athena/rc.conf
NOCREATE=false;		export NOCREATE		# Create /etc/nocreate; see al_login_allowed(3)
EOF

grep -q ^NOATTACH /etc/athena/rc.conf || cat << EOF >> /etc/athena/rc.conf
NOATTACH=false;		export NOATTACH		# Disallow attaching homedirs?
EOF

grep -q ^NOREMOTE /etc/athena/rc.conf || cat << EOF >> /etc/athena/rc.conf
NOREMOTE=false;		export NOREMOTE		# Create /etc/noremote; see al_login_allowed(3)
EOF

grep -q ^AUTOUPDATE /etc/athena/rc.conf || cat << EOF >> /etc/athena/rc.conf
AUTOUPDATE=true;	export AUTOUPDATE	# Automatically update?
EOF

grep -q ^SYNCCONFIG /etc/athena/rc.conf || cat << EOF >> /etc/athena/rc.conf
SYNCCONFIG=true;	export SYNCCONFIG	# Syncronize configurations?
EOF

grep -q ^MAILRELAY /etc/athena/rc.conf || cat << EOF >> /etc/athena/rc.conf
MAILRELAY=default;	export MAILRELAY	#* SMTP relay host | default | none
EOF

if [ ! -f /etc/shells ]; then
  touch /etc/shells
fi
for s in %{extrashells}; do
  if ! grep -q "^$s\$" /etc/shells; then
    echo "$s" >> /etc/shells
  fi
done

grep "^/usr/athena/lib$" /etc/ld.so.conf >/dev/null 2>&1
[ $? -ne 0 ] && echo "/usr/athena/lib" >> /etc/ld.so.conf || true

%preun
if [ $1 = 0 ]; then
  chkconfig --del athena-ws
  chkconfig --del athena-verify
  chkconfig --del syncconf
  chkconfig --del athena-sysconfig
fi

%postun
[ $1 = 0 ] || exit 0
for s in %{extrashells}; do
  grep -v "^$s\$" < /etc/shells > /etc/shells.rpm
  mv /etc/shells.rpm /etc/shells
done

grep -v "/usr/athena/lib" /etc/ld.so.conf > /etc/ld.so.conf.new
mv -f /etc/ld.so.conf.new /etc/ld.so.conf
