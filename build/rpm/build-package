#!/bin/sh

# Build a standard Athena package into an RPM.
# Currently this is hardwired for Linux.

usage="build-package -n [-s srcdir] [-d destdir] [-v version] [-r release] source rpmname"

sourcedir=/mit/source
destdir=/build
makepackage=yes

while getopts s:d:v:r: opt; do
    case "$opt" in
    n)
	makepackage=no
	;;
    s)
	sourcedir="$OPTARG"
	;;
    d)
	destdir="$OPTARG"
	;;
    v)
	version="$OPTARG"
	;;
    r)
	release="$OPTARG"
	;;
    esac
done
shift `expr $OPTIND - 1`

athena_dir=$1
package_name=$2

# XXX sigh.
if [ third/krb5/src/appl = "$athena_dir" ]; then
  athena_dir=third/krb5
fi

. $sourcedir/packs/build/version
if [ "${version+set}" != set ]; then 
  version=$major.$minor
fi
if [ "${release+set}" != set ]; then
  release=$patch
fi

source_name=$package_name-$version

# Set a consistent path.
export PATH=/usr/athena/bin:/usr/bin:/bin:/usr/X11R6/bin

## STEP 0: Prepare the "topdir" area.

echo "==== prepare topdir"

mkdir -p \
$destdir/BUILD \
$destdir/SOURCES \
$destdir/INSTALL \
$destdir/SPECS \
$destdir/SRPMS \
$destdir/RPMS/i386 \
$destdir/athtools 

rm -f $destdir/rpmmacros
cat > $destdir/rpmmacros <<EOF
%_topdir	$destdir
EOF

rm -f $destdir/rpmrc
cat > $destdir/rpmrc <<EOF
macrofiles:	/usr/lib/rpm/macros:/usr/lib/rpm/%{_target}/macros:/etc/rpm/macros:/etc/rpm/%{_target}/macros:$destdir/rpmmacros
EOF


## STEP 1: Generate canonical source

echo "==== prepare sources"

# Copy in the sources.
rm -rf $destdir/SOURCES/$source_name
mkdir $destdir/SOURCES/$source_name
cd $destdir/SOURCES
(cd $sourcedir/$athena_dir; tar cf - .) | (cd $source_name; tar xfp -)

# Run the prep script, if any.
if [ -a $sourcedir/packs/build/rpm/prep/$package_name ]; then
    $sourcedir/packs/build/rpm/prep/$package_name $sourcedir $source_name \
      || exit 1
fi

# Copy in do.sh and run the "do dist" step to prepare a
# self-sufficient source tree.
cp $sourcedir/packs/build/do.sh $source_name/do.sh
(cd $source_name && ./do.sh -s $sourcedir -d $destdir/INSTALL dist) || exit 1

# Generate the sources file, and remove what we don't need any more.
(cd $destdir/SOURCES && tar cfz $source_name.tar.gz $source_name)
rm -rf $source_name


## STEP 2: Generate a specs file

echo "==== create specs"

# We fill in this; the rest is specified in the per-package file
rm -f $destdir/SPECS/$source_name
touch $destdir/SPECS/$source_name

# Disable build root strip policy.  (This macro is expanded by rpm
# at the end of the %install rule.  Normally it contains brp-strip
# and brp-strip-comment-note as well as brp-compress; we don't want
# those scripts to run because we prefer to install debugging
# binaries.)
echo '%define __spec_install_post /usr/lib/rpm/brp-compress || :' \
  >> $destdir/SPECS/$source_name

# Necessary preamble fields; fill them in if we need to.
# Name, Summary, Copyright, Group, and %description may not be omitted.

# Everything depends on athena-base.
echo Requires: athena-base >> $destdir/SPECS/$source_name

if grep -q Version: $sourcedir/packs/build/rpm/specs/$package_name; then true; else 
  echo Version: $version >> $destdir/SPECS/$source_name
fi

if grep -q Release: $sourcedir/packs/build/rpm/specs/$package_name; then true; else 
  echo Release: $release >> $destdir/SPECS/$source_name
fi

if grep -q Source: $sourcedir/packs/build/rpm/specs/$package_name; then true; else 
  echo Source: $source_name.tar.gz >> $destdir/SPECS/$source_name
fi

if grep -q Distribution: $sourcedir/packs/build/rpm/specs/$package_name; then true; else 
  echo Distribution: Athena $version >> $destdir/SPECS/$source_name
fi

if grep -q Vendor: $sourcedir/packs/build/rpm/specs/$package_name; then true; else 
  echo Vendor: MIT Athena >> $destdir/SPECS/$source_name
fi

if grep -q BuildRoot: $sourcedir/packs/build/rpm/specs/$package_name; then true; else 
  echo 'BuildRoot: %{_tmppath}/%{name}-%{version}-root' >> $destdir/SPECS/$source_name
fi

# Now the file as we have it gets included.
cat $sourcedir/packs/build/rpm/specs/$package_name >> $destdir/SPECS/$source_name

# And finally the scripts get included.
if grep -q %prep $sourcedir/packs/build/rpm/specs/$package_name; then true; else 
cat >> $destdir/SPECS/$source_name << 'EOF'
%prep
%setup

EOF
fi

if grep -q %build $sourcedir/packs/build/rpm/specs/$package_name; then true; else 
cat >> $destdir/SPECS/$source_name << 'EOF'
%build
./do.sh -p -s /xxx -d $RPM_BUILD_ROOT prepare
./do.sh -p -s /xxx -d $RPM_BUILD_ROOT all

EOF
fi

if grep -q %install $sourcedir/packs/build/rpm/specs/$package_name; then true; else 
cat >> $destdir/SPECS/$source_name << 'EOF'
%install
rm -rf $RPM_BUILD_ROOT
mkdir $RPM_BUILD_ROOT
./do.sh -p -s /xxx -d $RPM_BUILD_ROOT install

# Don't try to install a /usr/athena/info/dir file.
rm -f $RPM_BUILD_ROOT/usr/athena/info/dir

find $RPM_BUILD_ROOT -type f -or -type l |
    sed -e "s|$RPM_BUILD_ROOT||" | sort > rpm.filelist

EOF
fi

if grep -q %files $sourcedir/packs/build/rpm/specs/$package_name; then true; else 
cat >> $destdir/SPECS/$source_name << 'EOF'
%files -f rpm.filelist

EOF
fi

if grep -q %post $sourcedir/packs/build/rpm/specs/$package_name; then true; else
cat >> $destdir/SPECS/$source_name << 'EOF'
%post
for file in `find /usr/athena/info -type f ! -name dir`; do
    install-info --info-dir=/usr/athena/info $file 2>/dev/null
done
exit 0
EOF
fi

## STEP 3: Make the package.

echo "==== build package"

rpmbuild -ba -v --rcfile=$destdir/rpmrc --target=i386-athena-linux --buildroot=$destdir/INSTALL $destdir/SPECS/$source_name
if [ $? -ne 0 ]; then
    exit 1
fi


## STEP 4: Copy the built package into athtools

echo "==== save tools"

(cd $destdir/INSTALL; tar cf - .) | (cd $destdir/athtools; tar xfp - .)
