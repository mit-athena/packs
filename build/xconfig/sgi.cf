XCOMM platform:  $XConsortium: sgi.cf,v 1.19 91/07/28 22:39:45 rws Exp $

#define OSName			IRIX
XCOMM operating system:		OSName

#ifndef OSMajorVersion
#define OSMajorVersion 5
#endif
#ifndef OSMinorVersion
#define OSMinorVersion 0
#endif

/* DirFailPrefix necessary for smake parallelism */
#define DirFailPrefix -

#define CompressAllFonts		YES
#define InstallXdmConfig		YES
#define InstallFSConfig			YES
#define HasPutenv			YES
#define XdmDir				/var/X11/xdm
#define DefaultFSConfigFile		/var/X11/fs/config
#define ExecableScripts			YES
#define SetTtyGroup			YES
#define HasNdbm				YES
#define HasVFork			YES
#define Malloc0ReturnsNull		YES
#define ExpandManNames			YES
#define HasShm				YES
/* Beginning in IRIX 3.3, sgi had unix domain sockets */
#define HasSockets			YES
#define MotifBC                         YES /* Motif bug compatibility for R4 MIPS ABI compliance */
#define NeedDefineMakeCmdToMake		NO  /* make defines $(MAKE) */
#define BuildXInputExt			YES
#define BuildReadDisplayExt		YES
#define BuildSGIMiscExt			YES
#define BuildScreenSaverExt		YES
#define BuildXTrapExt			YES

#ifndef BuildSGIStereoExt
#define BuildSGIStereoExt		YES
#endif

#ifndef BuildXVExt
#define BuildXVExt			YES
#endif

#ifndef BuildPex
#define BuildPex			NO
#endif
#ifndef BuildNMBX
#define BuildNMBX			YES
#endif
#ifndef BuildXamineYourZerverExt
#define BuildXamineYourZerverExt	NO
#endif

#define NeedVarargsPrototypes		YES
#define NeedConstPrototypes		YES
#define NeedWidePrototypes		NO

#ifndef UseInstalled
/*
 * All SGI internal rules are confined to this non-shipped .cf file.
 */
#include <sgiInternal.cf>
#endif

#if OSMajorVersion <= 4

# define OSDefines	-DIRIX4 -DSYSV
# define SystemV	YES
# define SystemV4	NO

#else /* OSMajorVersion > 4 ... */

# define OSDefines	-DSYSV -DSVR4
# define SystemV	NO
# define SystemV4	YES
/* The following produces dynamic executables, using libc.so */
# define ExtraLoadOptions -call_shared

#endif /* OSMajorVersion */

#define AllocateLocalDefines -DINCLUDE_ALLOCA_H

#if OSMajorVersion > 4
#define IntlDefines -DXML
#else
#define IntlDefines -DXML -DX_WCHAR -DX_LOCALE
#endif

#define StandardDefines IntlDefines OSDefines

#undef StandardIncludes
#if OSMajorVersion > 4
#define StandardIncludes -nostdinc -I$(ROOT)/usr/include
#else
#define StandardIncludes -I$(ROOT)/usr/include -I
#endif

#if OSMajorVersion > 4
#define ExtraLibraries \
	-nostdlib -L$(ROOT)/lib -L$(ROOT)$(USRLIBDIR)
#else
#define ExtraLibraries \
	-L -L$(ROOT)/lib -L$(ROOT)$(USRLIBDIR) -lsun -lmalloc -lc_s
#endif

/* SGI Specific "make" Variables -- Same as would come from "commondefs" */
        OPTIMIZER = -O2

#if OSMajorVersion < 6
#define SymbolTables -Wf,-XNh2000
#define PexSymbolTables -Wf,-XNp15000,-XNd15000,-XNh2000
#else
#define SymbolTables /**/
#define PexSymbolTables /**/
#endif /* OSMajorVersion */
#define ServerSymbolTables SymbolTables

#ifndef sgiCCOptions
#define sgiCCOptions -xansi
#endif

#define OptimizedCDebugFlags $(OPTIMIZER)
#define BootstrapCFlags $(OPTIMIZER)
#define DefaultCCOptions sgiCCOptions SymbolTables
#define ServerCCOptions sgiCCOptions ServerSymbolTables
#define ConnectionFlags -DTCPCONN -DUNIXCONN -DSGI_SHM_TRANS
#define PexCCOptions sgiCCOptions PexSymbolTables

/*
 * The SGI (SYSV) make only sets $(MAKEFLAGS), while smake just sets
 * $(MFLAGS). Setting ConstructMFLAGS = YES would botch things whenver
 * smake is done.  In any case, executing make/smake with a $(MFLAGS) arg
 * is never necessary, since $(MFLAGS) and $(MAKEFLAGS) are inherited.
 */
#define ConstructMFLAGS		NO	/* build MFLAGS from MAKEFLAGS */

/* Used only for compressed fonts */
#define UNCOMPRESSPATH /usr/bsd/uncompress

/* Normally used only to conditionally chose the default font path order */
#define PrimaryScreenResolution 96

/*
 * XXX MIT specifies misc,Speedo,Type1,NNNdpi,NNNdpi but SGI wants
 * NNNdpi,NNNdpi,misc,Type1,Speedo because of the way the "fixed" font
 * is in NNNdpi instead of being pulled from misc.  Also note that Xsgi
 * reorders 100dpi and 75dpi automatically at run-time to best fit
 * the resolution of the actual screen since it varies across monitors
 * and graphics boards.
 */
#ifndef DefaultFontPath
#if PrimaryScreenResolution < 88                /* (75 + 100) / 2 */
#define DefaultFontPath $(FONTDIR)/75dpi/,$(FONTDIR)/100dpi/,$(FONTDIR)/misc/,$(FONTDIR)/Type1/,$(FONTDIR)/Speedo/
#else
#define DefaultFontPath $(FONTDIR)/100dpi/,$(FONTDIR)/75dpi/,$(FONTDIR)/misc/,$(FONTDIR)/Type1/,$(FONTDIR)/Speedo/
#endif
#endif

/* Override Imake.tmpl's "-X" flag */
#define LdCombineFlags -r

/* Installation Build Parameters */
#define InstKmemFlags -m 2755 -g sys

#define LnCmd ln -s
#define TroffCmd psroff -t
#ifdef UseInstalled
#define InstallCmd bsdinst
#endif

/* for xdm or anyone else to use */
#define DefaultUserPath :/usr/sbin:/usr/bsd:/sbin:/usr/bin:/bin:/usr/bin/X11
#define DefaultSystemPath /usr/sbin:/usr/bsd:/sbin:/usr/bin:/bin:/etc:/usr/etc:/usr/bin/X11

#define ManSuffix	1
#define LibManSuffix	3

#undef ManDir
#undef LibmanDir
#define ManDir $(CATMAN1DIR)$(MANPACKAGE)
#define LibmanDir $(CATMAN3DIR)$(MANPACKAGE)
#define NroffManDir $(MAN1DIR)$(MANPACKAGE)
#define NroffLibmanDir $(MAN3DIR)$(MANPACKAGE)

#ifdef UseInstalled
           MANUSR = /usr/share/local
#else
           MANUSR = /usr/share
#endif

       CATMAN1DIR = $(MANUSR)/catman/u_man/cat1
       CATMAN3DIR = $(MANUSR)/catman/p_man/cat3
          MAN1DIR = $(MANUSR)/man/u_man/man1
          MAN3DIR = $(MANUSR)/man/p_man/man3

/*
 * MANPACKAGE is the directory inside of cat? or man? that man pages should
 * be placed.  The prefixed / is important because of the way MANPACKAGE
 * will be concatted with *MANDIR.
 */
       MANPACKAGE = /X11

/*
 * InstallManPageLong - misc changes for sgi.
 */
#define InstallManPageLong(file,destdir,dest)				@@\
file.nr.z : file.man							@@\
	@if [ -f file.man ]; then \					@@\
		$(RM) file.nr file.nr.z && \				@@\
		tbl file.man | eqn | nroff -man - > file.nr && \	@@\
		pack -f file.nr; \					@@\
	fi								@@\
									@@\
install.man:: file.nr.z							@@\
	MakeDir($(DESTDIR)destdir); \					@@\
	if [ -f file.man ]; then \					@@\
		$(INSTALL) -c $(INSTMANFLAGS) \				@@\
			file.nr.z $(DESTDIR)destdir/dest.z; \		@@\
	fi								@@\
									@@\
clean::									@@\
	$(RM) file.nr file.nr.z

/*
 * InstallManPageAliases - generate rules to install manual page aliases.
 */
#ifndef InstallManPageAliases
#define InstallManPageAliases(file,destdir,aliases)			@@\
install.man::								@@\
	@case '$(MFLAGS) $(MAKEFLAGS)' in *[i]*) set +e;; esac && \	@@\
	@echo cd $(DESTDIR)destdir && cd $(DESTDIR)destdir && \		@@\
	for i in aliases; do \						@@\
		(set -x && $(RM) $$i.z && $(LN) file.z $$i.z); \	@@\
	done;
#endif /* InstallManPageAliases */

/*
 * Define the following to use a single shell command.
 * Doing so isn't required by sgi make or smake,
 * but the speedup is very significant.
 */

/* ObjectCompile - used by NormalLibObjCompile */
#ifndef ObjectCompile(options)
#define ObjectCompile(options) $(RM) $@ && \				@@\
	$(CC) -c $(CFLAGS) options $*.c
#endif

/* LibObjCompile */
#define	LibObjCompile(dir,options) $(RM) $@ dir/$@ \			@@\
	&& $(CC) -c $(CCOPTIONS) $(ALLDEFINES) options $*.c \		@@\
	&& $(MV) $@ dir/$@

/* LinkSourceFile */
#define LinkSourceFile(src,dir)						@@\
src:  dir/src								@@\
	$(RM) $@ && $(LN) $? $@

/* LinkFile */
#define LinkFile(tofile,fromfile)					@@\
tofile:: fromfile							@@\
	$(RM) $@ && $(LN) $? $@

/* ObjectFromSpecialSource */
#define ObjectFromSpecialSource(dst,src,flags)				@@\
dst.c:  src.c								@@\
	$(RM) $@ && $(LN) $? $@						@@\
									@@\
dst.o:  dst.c								@@\
	ObjectCompile(flags)						@@\
									@@\
depend::  dst.c								@@\
									@@\
clean::									@@\
	$(RM) dst.c

/* LinkFileList */
#define LinkFileList(step,list,dir,sub)					@@\
step:: list								@@\
	@case '$(MFLAGS) $(MAKEFLAGS)' in *[i]*) set +e;; esac && \	@@\
	echo "	cd" dir && cd dir && \					@@\
	for i in list; do \						@@\
		(set -x && $(RM) $$i && $(LN) sub/$$i .); done

#include <sgiLib.rules>
